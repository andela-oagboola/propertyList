"use strict";var ApplicationConfiguration=function(){var applicationModuleName="propertylist",applicationModuleVendorDependencies=["ngResource","ui.router","ui.bootstrap","ui.utils","ngFileUpload"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("properties"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus","$location",function($scope,Authentication,Menus,$location){return $scope.authentication=Authentication,"pending"===$scope.authentication.user.verification?$location.path("/unverified-user"):($scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},void $scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1}))}]),angular.module("core").controller("HomeController",["$scope","Authentication","$location",function($scope,Authentication,$location){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("properties").config(["$stateProvider",function($stateProvider){$stateProvider.state("allProperties",{url:"/properties",templateUrl:"modules/properties/views/allproperties.client.view.html",controller:"PropertiesCtrl"}).state("addProperties",{url:"/properties/add",templateUrl:"modules/properties/views/addProperties.client.view.html",controller:"addPropertiesCtrl"}).state("viewProperties",{url:"/properties/:propertyId",templateUrl:"modules/properties/views/viewProperty.client.view.html",controller:"ViewPropertyCtrl"}).state("editProperties",{url:"/properties/:propertyId/edit",templateUrl:"modules/properties/views/editProperty.client.view.html",controller:"EditPropertyCtrl"}).state("contactAgent",{url:"/properties/:propertyId/contact-agent",templateUrl:"modules/properties/views/contactAgent.client.view.html",controller:"ContactAgentCtrl"})}]),angular.module("properties").controller("addPropertiesCtrl",["$scope","Authentication","$upload","backendService","$location",function($scope,Authentication,$upload,backendService,$location){return $scope.user=Authentication.user,$scope.properties={},$scope.properties.email=$scope.user.email,$scope.user?($scope.onFileSelect=function($files){$files&&$files.length>0&&($scope.files=$files)},void($scope.createProperty=function(){$scope.file=$scope.files[0],backendService.uploadImage($scope.file,"POST","/properties",$scope.properties).progress(function(evt){$scope.uploadProgress=parseInt(100*evt.loaded/evt.total,10)}).success(function(data,status,headers,config){$scope.property=data;var propertyId=data._id;return alert("Property has been created"),$location.path("/properties/"+propertyId)})})):$location.path("/")}]),angular.module("properties").controller("ContactAgentCtrl",["$location","$scope","Authentication","backendService","$stateParams",function($location,$scope,Authentication,backendService,$stateParams){return $scope.authentication=Authentication,$scope.authentication.user?($scope.user=Authentication.user,$scope.mailContent={},backendService.getSingleProperty($stateParams.propertyId).success(function(property){$scope.property=property[0]}),void($scope.sendMail=function(){$scope.mailContent={receiverEmail:$scope.property.email,senderEmail:$scope.user.email,senderName:$scope.user.displayName,subject:$scope.mailContent.subject,message:$scope.mailContent.message},backendService.contactAgent($stateParams.propertyId,$scope.mailContent).success(function(ee){console.log(ee),alert("done")})})):$location.path("/")}]),angular.module("properties").controller("EditPropertyCtrl",["Authentication","$scope","backendService","$stateParams","$location",function(Authentication,$scope,backendService,$stateParams,$location){if($scope.authentication=Authentication,!$scope.authentication.user)return $location.path("/");$scope.editImage=!0;var getProperty=function(){backendService.getSingleProperty($stateParams.propertyId).success(function(res){$scope.properties=res[0]})};getProperty(),$scope.onFileSelect=function($files){$files&&$files.length>0&&($scope.newFile=$files[0],$scope.fileName=$scope.newFile.name)},$scope.edit_image=function(){$scope.editImage=!1,$scope.allowEdit=!0,$scope.isDisabled=!0},$scope.cancelEdit=function(){$scope.fileName="",$scope.editImage=!0,$scope.allowEdit=!1,$scope.isDisabled=!1},$scope.updateImage=function(){var url=({image:$scope.fileName},"/properties/"+$stateParams.propertyId);backendService.uploadImage($scope.newFile,"PUT",url).progress(function(evt){$scope.uploadProgress=parseInt(100*evt.loaded/evt.total,10)}).success(function(data,status,headers,config){$scope.fileName="",getProperty(),alert("image update successful")})},$scope.updateProperty=function(){"/properties/"+$stateParams.propertyId;backendService.editProperty($stateParams.propertyId,$scope.properties).success(function(response){alert("update successful"),$location.path("/properties/"+$stateParams.propertyId)}).error(function(err){console.log("err",err)})}}]),angular.module("properties").controller("PropertiesCtrl",["$scope","backendService",function($scope,backendService){backendService.getProperties().success(function(properties){$scope.properties=properties})}]),angular.module("properties").controller("ViewPropertyCtrl",["Authentication","$scope","$location","$stateParams","backendService",function(Authentication,$scope,$location,$stateParams,backendService){$scope.user=Authentication.user,backendService.getSingleProperty($stateParams.propertyId).success(function(property){$scope.property=property,$scope.owner=$scope.property.posted_by._id}),$scope.deleteProperty=function(){var response=confirm("are you sure you want to delete this property?");response===!0&&backendService.deleteProperty($stateParams.propertyId).success(function(result){alert("property has been deleted"),$location.path("/properties")}).error(function(err){alert("err")})}}]),angular.module("properties").factory("backendService",["$http","$upload",function($http,$upload){return{getProperties:function(){return $http.get("/properties")},addProperty:function(property){return $http.post("/properties",property)},getSingleProperty:function(propertyId){return $http.get("/properties/"+propertyId)},deleteProperty:function(propertyId){return $http["delete"]("/properties/"+propertyId)},editProperty:function(propertyId,properties){return $http.put("/properties/"+propertyId,properties)},uploadImage:function(image,method,url,properties){return $upload.upload({url:url,method:method,data:properties,file:image})},contactAgent:function(propertyId,property){return $http.post("/properties/"+propertyId+"/contactAgent",property)}}}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"}).state("unverified-user",{url:"/unverified-user",templateUrl:"modules/users/views/authentication/unverified-user.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication;var getProperties=function(){$http.get("/properties").success(function(res){$scope.properties=res})};getProperties(),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/unverified-user")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){return $scope.authentication.user=response,"pending"===$scope.authentication.user.verification?$location.path("/unverified-user"):void $location.path("/properties")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);